name: Release

on:
    workflow_dispatch:
        inputs:
            version_bump:
                description: "Version bump type"
                required: true
                default: "patch"
                type: choice
                options:
                    - patch
                    - minor
                    - major

jobs:
    release:
        runs-on: ubuntu-latest
        permissions:
            contents: write

        steps:
            - uses: actions/checkout@v5
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  fetch-depth: 0 # Needed to access all tags for changelog

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Install build dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install build

            - name: Get current version and calculate new version
              id: version
              run: |
                  set -euo pipefail
                  CURRENT_VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
                  echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

                  IFS='.' read -ra VERSION <<< "$CURRENT_VERSION"
                  MAJOR=${VERSION[0]}
                  MINOR=${VERSION[1]}
                  PATCH=${VERSION[2]}

                  case "${{ github.event.inputs.version_bump }}" in
                    major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
                    minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
                    patch) PATCH=$((PATCH + 1)) ;;
                  esac

                  NEW_VERSION="$MAJOR.$MINOR.$PATCH"
                  echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
                  echo "Bumping version from $CURRENT_VERSION to $NEW_VERSION"

            - name: Update version in pyproject.toml
              run: |
                  sed -i 's/version = ".*"/version = "${{ steps.version.outputs.new_version }}"/' pyproject.toml

            - name: Build package
              run: python -m build

            - name: Configure Git
              run: |
                  git config --local user.name "GitHub Action"
                  git config --local user.email "action@github.com"

            - name: Commit version bump
              run: |
                  git add pyproject.toml
                  if git diff --cached --quiet; then
                    echo "No changes to commit"
                  else
                    git commit -m "Bump version to v${{ steps.version.outputs.new_version }}"
                    git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
                  fi

            - name: Push changes
              run: |
                  git push origin main --follow-tags

            - name: Get changelog since last tag
              id: changelog
              run: |
                  LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
                  if [ -n "$LAST_TAG" ]; then
                    CHANGELOG=$(git log "$LAST_TAG"..HEAD --pretty=format:"- %s" --no-merges)
                  else
                    CHANGELOG=$(git log HEAD --pretty=format:"- %s" --no-merges)
                  fi
                  echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
                  echo "$CHANGELOG" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: "v${{ steps.version.outputs.new_version }}"
                  name: "v${{ steps.version.outputs.new_version }}"
                  body: ${{ steps.changelog.outputs.CHANGELOG }}
                  files: |
                      dist/*.whl
                      dist/*.tar.gz
                  draft: false
                  prerelease: false
